/**
 * data是Object的情况:
 * 为了把所有的属性包括子属性全部监测到,封装一个Observer类.
 * 这个类的作用是将一个数据内的所有属性都转换成getter/setter形式,追踪它们的变化.
 * Object.defineProperty给data定义get.set函数.
 * 在get中收集依赖. 先假设依赖是一个函数,保存在window.target中.
 * 收集依赖需要为依赖找一个存储的地方.因此定义一个Dep类,可以在其中收集依赖,删除依赖,向依赖发送通知.
 * 依赖可能是一个模板,也可能是用户写的一个watch函数.因此也定义一个类Watcher.
 * 只有Watcher触发的getter才会收集依赖.
 * 收集依赖阶段只收集这个类的实例进来,通知也只通知它一个.再由它去通知其他地方.Watcher接收到通知后,
 * 会向外界发送通知.可能是触发视图更新,也可能是触发用户的某个回调函数.
 * 当数据发生变化时,循环依赖列表,把所有的Watcher都通知一遍.
 * 依赖要能主动去订阅数据: 即可以把自己主动添加到数据的Dep中.原理:
 * 先把Watcher实例自身设置到全局唯一的一个位置,例如:window.target.
 * 然后读取数据,触发数据的getter;getter会从全局唯一的那个位置收集这个正在读取数据的Watcher实例到Dep中.
 * 
 * data是Array的情况:
 * Array是通过方法来改变内容,因此通过创建拦截器去覆盖数组原型的方式来追踪变化.
 * Array依赖存储的位置很关键:既要让getter中可以访问到,也要让拦截器可以取到依赖.
 */
